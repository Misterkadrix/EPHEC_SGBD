<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Deplacement;
use App\Models\CourseSession;
use App\Models\Group;
use App\Models\Site;
use Carbon\Carbon;

class DeplacementSeeder extends Seeder
{
    public function run(): void
    {
        $this->command->info('üåç Cr√©ation des d√©placements inter-sites...');

        // Supprimer les d√©placements existants
        Deplacement::query()->delete();
        $this->command->info('üóëÔ∏è Anciens d√©placements supprim√©s');

        // Cr√©er des d√©placements simples entre sessions existantes
        $this->createSimpleDeplacements();
    }

    private function createSimpleDeplacements()
    {
        $this->command->info('üö∂ Cr√©ation de d√©placements simples...');
        
        // R√©cup√©rer quelques sessions existantes
        $sessions = CourseSession::with(['course', 'site', 'room'])
            ->orderBy('start_at')
            ->limit(10)
            ->get();
        
        if ($sessions->count() < 2) {
            $this->command->error('‚ùå Pas assez de sessions pour cr√©er des d√©placements');
            return;
        }

        $deplacementsCrees = 0;
        $deplacementsInterSite = 0;

        // Cr√©er des d√©placements entre sessions cons√©cutives
        for ($i = 0; $i < $sessions->count() - 1; $i++) {
            $session1 = $sessions[$i];
            $session2 = $sessions[$i + 1];

            // V√©rifier que les sessions sont le m√™me jour
            if ($session1->start_at->toDateString() !== $session2->start_at->toDateString()) {
                continue;
            }

            // Cr√©er un d√©placement pour le groupe A
            $existingDeplacement = Deplacement::where('session_depart_id', $session1->id)
                ->where('session_arrivee_id', $session2->id)
                ->where('group_id', 1)
                ->first();

            if ($existingDeplacement) {
                continue;
            }

            // Cr√©er le d√©placement
            $dureeTrajet = 60; // 1 heure par d√©faut
            
            // Si c'est le m√™me site, dur√©e plus courte
            if ($session1->site_id === $session2->site_id) {
                $dureeTrajet = 15; // 15 minutes pour m√™me site
            }

            Deplacement::create([
                'session_depart_id' => $session1->id,
                'site_depart_id' => $session1->site_id,
                'room_depart_id' => $session1->room_id,
                'session_arrivee_id' => $session2->id,
                'site_arrivee_id' => $session2->site_id,
                'room_arrivee_id' => $session2->room_id,
                'group_id' => 1, // Groupe A
                'heure_depart' => $session1->end_at,
                'heure_arrivee' => $session2->start_at,
                'duree_trajet_minutes' => $dureeTrajet,
            ]);

            $deplacementsCrees++;
            
            if ($session1->site_id !== $session2->site_id) {
                $deplacementsInterSite++;
            }

            // Limiter le nombre de d√©placements
            if ($deplacementsCrees >= 15) {
                break;
            }
        }

        $this->command->info("‚úÖ {$deplacementsCrees} d√©placements cr√©√©s ({$deplacementsInterSite} inter-sites)");
        
        // Afficher quelques exemples
        $this->command->info('üìã Exemples de d√©placements cr√©√©s :');
        $exemples = Deplacement::with([
            'group', 
            'sessionDepart.course', 
            'sessionArrivee.course',
            'siteDepart',
            'siteArrivee'
        ])->limit(5)->get();

        foreach ($exemples as $deplacement) {
            $type = $deplacement->site_depart_id === $deplacement->site_arrivee_id ? 'M√™me site' : 'Inter-site';
            $this->command->info("‚Ä¢ {$deplacement->group->name}: {$deplacement->sessionDepart->course->code} ‚Üí {$deplacement->sessionArrivee->course->code} ({$type})");
        }
    }
}
