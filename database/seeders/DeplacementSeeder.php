<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Deplacement;
use App\Models\CourseSession;
use App\Models\Group;
use App\Models\Site;
use Carbon\Carbon;

class DeplacementSeeder extends Seeder
{
    public function run(): void
    {
        $this->command->info('üåç Cr√©ation des d√©placements inter-sites...');

        // Supprimer les d√©placements existants
        Deplacement::query()->delete();
        $this->command->info('üóëÔ∏è Anciens d√©placements supprim√©s');

        // Cr√©er des d√©placements simples entre sessions existantes
        $this->createSimpleDeplacements();
    }

    private function createSimpleDeplacements()
    {
        $this->command->info('üö∂ Cr√©ation de d√©placements selon la logique m√©tier...');
        
        // R√©cup√©rer toutes les sessions group√©es par groupe et par jour
        $sessions = CourseSession::with(['course', 'site', 'room', 'sessionGroups.group'])
            ->orderBy('start_at')
            ->get();
        
        if ($sessions->count() < 2) {
            $this->command->error('‚ùå Pas assez de sessions pour cr√©er des d√©placements');
            return;
        }

        $deplacementsCrees = 0;
        $deplacementsInterSite = 0;

        // Grouper les sessions par groupe et par jour
        $sessionsByGroupAndDay = [];
        foreach ($sessions as $session) {
            foreach ($session->sessionGroups as $sessionGroup) {
                $groupId = $sessionGroup->group_id;
                $dayKey = $session->start_at->toDateString();
                $key = "{$groupId}_{$dayKey}";
                
                if (!isset($sessionsByGroupAndDay[$key])) {
                    $sessionsByGroupAndDay[$key] = [];
                }
                
                $sessionsByGroupAndDay[$key][] = $session;
            }
        }

        // Cr√©er des d√©placements pour chaque groupe et chaque jour
        foreach ($sessionsByGroupAndDay as $key => $daySessions) {
            // Trier les sessions par heure de d√©but
            usort($daySessions, function($a, $b) {
                return $a->start_at->compare($b->start_at);
            });
            
            // Cr√©er des d√©placements entre sessions cons√©cutives
            for ($i = 0; $i < count($daySessions) - 1; $i++) {
                $session1 = $daySessions[$i];
                $session2 = $daySessions[$i + 1];
                
                // Extraire le group_id de la cl√©
                $groupId = (int) explode('_', $key)[0];
                
                // V√©rifier qu'il n'existe pas d√©j√† un d√©placement
                $existingDeplacement = Deplacement::where('session_depart_id', $session1->id)
                    ->where('session_arrivee_id', $session2->id)
                    ->where('group_id', $groupId)
                    ->first();

                if ($existingDeplacement) {
                    continue;
                }

                // D√©terminer la dur√©e du trajet
                $dureeTrajet = 60; // 1 heure par d√©faut (sites diff√©rents)
                $heureDepart = $session1->end_at;
                $heureArrivee = $session2->start_at;
                
                // Si c'est le m√™me site, dur√©e plus courte (5 minutes)
                if ($session1->site_id === $session2->site_id) {
                    $dureeTrajet = 5; // 5 minutes pour m√™me site
                    // Les cours s'encha√Ænent directement (pas de d√©calage)
                    $heureDepart = $session1->end_at;
                    $heureArrivee = $session2->start_at;
                } else {
                    // Sites diff√©rents : il faut 1h de d√©placement
                    // Le cours suivant commence 1h apr√®s la fin du cours pr√©c√©dent
                    $heureDepart = $session1->end_at;
                    $heureArrivee = $session1->end_at->copy()->addHour();
                }

                Deplacement::create([
                    'session_depart_id' => $session1->id,
                    'site_depart_id' => $session1->site_id,
                    'room_depart_id' => $session1->room_id,
                    'session_arrivee_id' => $session2->id,
                    'site_arrivee_id' => $session2->site_id,
                    'room_arrivee_id' => $session2->room_id,
                    'group_id' => $groupId,
                    'heure_depart' => $heureDepart,
                    'heure_arrivee' => $heureArrivee,
                    'duree_trajet_minutes' => $dureeTrajet,
                ]);

                $deplacementsCrees++;
                
                if ($session1->site_id !== $session2->site_id) {
                    $deplacementsInterSite++;
                }

                $this->command->info("‚úÖ D√©placement cr√©√©: {$session1->course->code} ({$session1->site->name}) ‚Üí {$session2->course->code} ({$session2->site->name}) - Dur√©e: {$dureeTrajet}min");
            }
        }

        $this->command->info("‚úÖ {$deplacementsCrees} d√©placements cr√©√©s ({$deplacementsInterSite} inter-sites)");
        
        // Afficher quelques exemples
        $this->command->info('üìã Exemples de d√©placements cr√©√©s :');
        $exemples = Deplacement::with([
            'group', 
            'sessionDepart.course', 
            'sessionArrivee.course',
            'siteDepart',
            'siteArrivee'
        ])->limit(5)->get();

        foreach ($exemples as $deplacement) {
            $type = $deplacement->site_depart_id === $deplacement->site_arrivee_id ? 'M√™me site (5min)' : 'Inter-site (1h)';
            $this->command->info("‚Ä¢ {$deplacement->group->name}: {$deplacement->sessionDepart->course->code} ‚Üí {$deplacement->sessionArrivee->course->code} ({$type})");
        }
    }
}
